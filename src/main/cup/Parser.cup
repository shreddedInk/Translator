package ru.omsu.translator.cup;

import java.util.HashMap;
import java.util.Map;
import java_cup.runtime.*;
import ru.omsu.translator.CustomSymbol;
import ru.omsu.translator.Token;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import java_cup.parser;

init with{:
    parser Parser;
    System.out.println("старт парсинга");
:}

parser code {:
    public Parser(java_cup.runtime.SymbolFactory sf, Scanner s) {
        super(s, sf);
    }

    protected java_cup.runtime.Scanner scanner;
    protected Map<String, Integer> varIndexes = new HashMap<>();
    protected int varCounter = 0;
    protected StringBuilder jasmin = new StringBuilder();

    public void setScanner(java_cup.runtime.Scanner s) {
        System.out.println("Установлен сканер (CUP)" + s);
        this.scanner = s;
    }

    public void debugPrintState(Symbol token) {
        System.out.println("Processing token: " + token.sym + ", Value: " + token.value);
    }

    private int getVarIndex(String varName) {
        return varIndexes.computeIfAbsent(varName, k -> varCounter++);
    }

    private void emit(String code) {
        System.out.println("Добавлена строчка Jasmin (CUP)" + code);
        jasmin.append("    ").append(code).append("\n");
    }

    String folderPath = "src/main/java/ru/omsu/translator/jasmin_code";
    String fileName = "Main.j";

    File directory = new File(folderPath);
    File file = new File(directory, fileName);

    public void getJasminCode() {
        try {
            if (!directory.exists()) {
                directory.mkdirs();
            }
            if (file.createNewFile()) {
                System.out.println("Файл создан: " + file.getAbsolutePath());
            } else {
                System.out.println("Файл уже существует: " + file.getAbsolutePath());
            }
                FileWriter writer = new FileWriter(file);
                writer.write(
                        ".class public Main\n"+
                        ".super java/lang/Object\n"+
                        ".method public static main([Ljava/lang/String;)V\n"+
                        ".limit stack 100\n"+
                        ".limit locals 100\n"+
                jasmin.toString());
                writer.close();
                System.out.println("Запись завершена.");
            } catch (IOException e) {
                e.printStackTrace();
            }
    }

:};

scan with {:
    java_cup.runtime.Symbol res = scanner.next_token();
    System.out.println("переход к след токену (CUP)" + res);
    return res;
:};

terminal CustomSymbol OPERATOR, KEYWORD, IDENTIFIER, STRING,
                      NUMBER, CHAR,
                      LPAREN, RPAREN, LBRACKET, RBRACKET,
                      BEGIN, END, WRITE, READ, ASSIGN,
                      SEMICOLON;

non terminal program, optional_statements, statement_list, statement;
non terminal String expr, term, factor;

precedence left OPERATOR;
precedence left SEMICOLON;

start with program;

program ::= BEGIN optional_statements END
    {:
        emit("    return");
        emit(".end method");

        getJasminCode();

    :}
    | error
    {: System.err.println("Syntax error in program"); :};

optional_statements ::= statement_list
                      | /* empty */;

statement_list ::= statement SEMICOLON statement_list
                 | statement SEMICOLON
                 ;

statement ::= IDENTIFIER:id ASSIGN expr:e
    {:
        debugPrintState(id);
        String name = (String)((CustomSymbol)id).getToken().getValue();
        int index = getVarIndex(name);
        emit(e); // e — это String, сгенерированный в expr
        emit("istore " + index);
    :}

           | WRITE LPAREN IDENTIFIER:id RPAREN
    {:
        String name = (String)((CustomSymbol)id).getToken().getValue();
        int index = getVarIndex(name);
        emit("getstatic java/lang/System/out Ljava/io/PrintStream;");
        emit("iload " + index);
        emit("invokevirtual java/io/PrintStream/println(I)V");
    :}
           | READ LPAREN IDENTIFIER:id RPAREN
    {:
        String name = (String)((CustomSymbol)id).getToken().getValue();
        int index = getVarIndex(name);
        emit("new java/util/Scanner");
        emit("dup");
        emit("getstatic java/lang/System/in Ljava/io/InputStream;");
        emit("invokespecial java/util/Scanner/<init>(Ljava/io/InputStream;)V");
        emit("invokevirtual java/util/Scanner/nextInt()I");
        emit("istore " + index);
    :};
expr ::= expr:a OPERATOR:op term:b
    {:
        String operator = (String)((CustomSymbol)op).getToken().getValue();
        StringBuilder sb = new StringBuilder();
        sb.append(a).append(b); // Подвыражения тоже возвращают строки
        switch (operator) {
            case "+": sb.append("    iadd\n"); break;
            case "-": sb.append("    isub\n"); break;
        }
        RESULT = sb.toString();
    :}
      | term:t
    {:
        RESULT = t;
    :};
term ::= term:a OPERATOR:op factor:b
    {:
        String operator = (String)((CustomSymbol)op).getToken().getValue();
        StringBuilder sb = new StringBuilder();
        sb.append(a).append(b);
        switch (operator) {
            case "*": sb.append("    imul\n"); break;
            case "/": sb.append("    idiv\n"); break;
        }
        RESULT = sb.toString();
    :}
     | factor:f
    {:
        RESULT = f;
    :};
factor ::= NUMBER:n
    {:
        int val = (Integer) n.getToken().getValue();
        RESULT = "    ldc " + val + "\n";
    :}
         | IDENTIFIER:id
    {:
        String name = (String)((CustomSymbol)id).getToken().getValue();
        int index = getVarIndex(name);
        RESULT = "    iload " + index + "\n";
    :}
         | LPAREN expr:e RPAREN
    {:
        RESULT = e;
    :};