package ru.omsu.translator.cup;

import java.util.HashMap;
import java.util.Map;
import java_cup.runtime.*;
import ru.omsu.translator.CustomSymbol;
import ru.omsu.translator.Token;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import java_cup.parser;

init with{:
    System.out.println("старт парсинга");
:}

parser code {:

    protected Map<String, Integer> varIndexes = new HashMap<>();
    protected int varCounter = 0;
    protected StringBuilder jasmin = new StringBuilder();

    private int getVarIndex(String varName) {
        return varIndexes.computeIfAbsent(varName, k -> varCounter++);
    }

    private void emit(String code) {
        System.out.println("Добавлена строчка Jasmin (CUP)" + code);
        jasmin.append("    ").append(code).append("\n");
    }

    String folderPath = "src/main/java/ru/omsu/translator/jasmin_code";
    String fileName = "Main.j";

    File directory = new File(folderPath);
    File file = new File(directory, fileName);

    public void getJasminCode() {
        try {
            if (!directory.exists()) {
                directory.mkdirs();
            }
            if (file.createNewFile()) {
                System.out.println("Файл создан: " + file.getAbsolutePath());
            } else {
                System.out.println("Файл уже существует: " + file.getAbsolutePath());
            }
                FileWriter writer = new FileWriter(file);
                writer.write(
                        ".class public Main\n"+
                        ".super java/lang/Object\n"+
                        ".method public static main([Ljava/lang/String;)V\n"+
                        ".limit stack 100\n"+
                        ".limit locals 100\n"+
                jasmin.toString());
                writer.close();
                System.out.println("Запись завершена.");
            } catch (IOException e) {
                e.printStackTrace();
            }
    }

:};


terminal CustomSymbol STRING, CHAR, IDENTIFIER,NUMBER,
                      LPAREN, RPAREN, LBRACKET, RBRACKET,
                      BEGIN, END, WRITE, READ, ASSIGN,
                      SEMICOLON, IF, WHILE, FOR, ARRAY, FUNCTION,
                      PLUS, MINUS, MULTIPLY, DIVIDE, EQ, NE, LT, GT, LE, GE, ELSE,COMMA;

non terminal program, optional_statements, statement_list, statement;
non terminal String expr, term, factor;
non terminal read_args, write_args, write_arg;

precedence left SEMICOLON;

start with program;

program ::= BEGIN optional_statements END
    {:
        emit("    return");
        emit(".end method");

        getJasminCode();

    :}
    | error
    {: System.err.println("Syntax error in program"); :};

optional_statements ::= statement_list
                      | /* empty */;

statement_list ::= statement SEMICOLON statement_list
                 | statement SEMICOLON | statement
                 ;

statement ::= IDENTIFIER:id ASSIGN expr:e
    {:
        String name = (String)id.value;
        int index = getVarIndex(name);
        emit(e);
        emit("istore " + index);
    :}

              | READ LPAREN read_args RPAREN
        {::}

              | WRITE LPAREN write_args RPAREN
        {::}
    ;
expr ::= expr:a PLUS:p term:b
    {:
        StringBuilder sb = new StringBuilder();
        sb.append(a).append(b).append("    iadd\n");
        RESULT = sb.toString();
    :}
      | expr:a MINUS:m term:b
    {:
        StringBuilder sb = new StringBuilder();
        sb.append(a).append(b).append("    isub\n");
        RESULT = sb.toString();
    :}
      | term:t
    {:
        RESULT = t;
    :};

term ::= term:a MULTIPLY:m factor:b
    {:
        StringBuilder sb = new StringBuilder();
        sb.append(a).append(b).append("    imul\n");
        RESULT = sb.toString();
    :}
     | term:a DIVIDE:d factor:b
    {:
        StringBuilder sb = new StringBuilder();
        sb.append(a).append(b).append("    idiv\n");
        RESULT = sb.toString();
    :}
     | factor:f
    {:
        RESULT = f;
    :};

factor ::= NUMBER:n
    {:
        int val = (Integer) n.value;
        RESULT = "    ldc " + val + "\n";
    :}
         | IDENTIFIER:id
    {:
        String name = (String)id.value;
        int index = getVarIndex(name);
        RESULT = "    iload " + index + "\n";
    :}
         | LPAREN expr:e RPAREN
    {:
        RESULT = e;
    :};

read_args ::= IDENTIFIER:id
    {:
        String name = (String)id.value;
        int index = getVarIndex(name);
        emit("new java/util/Scanner");
        emit("dup");
        emit("getstatic java/lang/System/in Ljava/io/InputStream;");
        emit("invokespecial java/util/Scanner/<init>(Ljava/io/InputStream;)V");
        emit("invokevirtual java/util/Scanner/nextInt()I");
        emit("istore " + index);
    :}
           | IDENTIFIER:id COMMA read_args
    {:
        String name = (String)id.value;
        int index = getVarIndex(name);
        emit("new java/util/Scanner");
        emit("dup");
        emit("getstatic java/lang/System/in Ljava/io/InputStream;");
        emit("invokespecial java/util/Scanner/<init>(Ljava/io/InputStream;)V");
        emit("invokevirtual java/util/Scanner/nextInt()I");
        emit("istore " + index);
    :};

write_args ::= write_arg
    {:
    :}
             | write_arg COMMA write_args
    {:
    :};

write_arg ::= STRING:s
    {:
        emit("getstatic java/lang/System/out Ljava/io/PrintStream;");
        emit("ldc \"" + s.value + "\"");
        emit("invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V");
    :}
           | CHAR:c
    {:
        emit("getstatic java/lang/System/out Ljava/io/PrintStream;");
        emit("ldc \"" + c.value + "\"");
        emit("invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V");
    :}
           | expr:e
    {:
        emit("getstatic java/lang/System/out Ljava/io/PrintStream;");
        emit(e);
        emit("invokevirtual java/io/PrintStream/print(I)V");
    :};