package ru.omsu.translator.cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import ru.omsu.translator.data.PascalLexer;
import ru.omsu.translator.java.Data;
import ru.omsu.translator.java.CustomSymbol;
import ru.omsu.translator.emitter.Emitter;
import ru.omsu.translator.emitter.Formatter;
import ru.omsu.translator.emitter.Command;
import ru.omsu.translator.emitter.Method;

init with{:
    System.out.println("старт парсинга");
:}

parser code {:
    protected java_cup.runtime.Scanner scanner;
    protected Emitter emitter;
    protected Map<String, Integer> varIndexes = new HashMap<>();
    protected int varCounter = 0;
    protected int labelCounter = 0;
    public void setScanner (java_cup.runtime.Scanner s) {
            System.out.println(s);
            this.scanner = s;
        }
    public void setEmitter (Emitter emitter) {
            this.emitter = emitter;

            emitter.writeStart();
            Method main = new Method("main", "V", new String[]{"public", "static"}, new String[]{"[Ljava/lang/String;"});
            emitter.addMethod(main);
            emitter.openMethod(main);
            emitter.addCommand(new Command(".limit stack 100"));
            emitter.addCommand(new Command(".limit locals 100"));
        }
    public void setSymbolFactory(java_cup.runtime.SymbolFactory sf) {
            System.out.println(sf);
            this.symbolFactory = sf;
        }
    private int getVarIndex(String varName) {
            return varIndexes.computeIfAbsent(varName, k -> varCounter++);
    }
    private int getLabelIndex() {
        return labelCounter++;
    }
:};


scan with {:
    java_cup.runtime.Symbol res = scanner.next_token();
    System.out.println("переход к след токену (CUP)" + res);
    return res;
:};

terminal CustomSymbol BEGIN, END;
terminal CustomSymbol IDENTIFIER;
terminal Boolean BOOLEAN_LITERAL;
terminal Integer NUMBER;
terminal CustomSymbol STRING, CHAR;
terminal CustomSymbol PLUS, MINUS, OR;
terminal CustomSymbol STAR, DIV, AND;
terminal CustomSymbol NOT;
terminal CustomSymbol ASSIGN, EQ, NEQ, LT, GT, LEQ, GEQ;
terminal CustomSymbol KEYWORD, LPAREN, RPAREN, LBRACKET, RBRACKET, WRITE, READ;
terminal CustomSymbol IF, THEN, ELSE, WHILE, FOR, DO, TO, REPEAT, UNTIL;
terminal CustomSymbol VAR, COLON, SEMICOLON;
terminal TypeExpression INTEGER, REAL, BOOLEAN;
terminal CustomSymbol DOT;

non terminal program;
non terminal variable_declaration_part, variable_declaration_list, variable_declaration;
non terminal optional_statements, compound_statement;
non terminal statement_list, statement, open_statement, closed_statement;
non terminal open_if_statement, open_while_statement, open_for_statement;
non terminal assignment_statment, closed_if_statement, closed_while_statement, closed_for_statement, repeat_statement,
write_statement, read_statement;
non terminal control_variable, initial_value, final_value;
non terminal String expression;
non terminal String cexpr, csimple_expr, cterm, cfactor;
non terminal String boolean_expr, boolean_simple_expr, boolean_term, boolean_factor;

precedence left NOT;
precedence left STAR, DIV, AND;
precedence left PLUS, MINUS, OR;
precedence nonassoc LT, GT, LEQ, GEQ, EQ, NEQ;// NOT// * /


start with program;

program ::= variable_declaration_part BEGIN statement_list END DOT {:
:}
            | BEGIN statement_list END DOT{:
    emitter.addCommand(new Command("return"));
:}          | error {:
    emitter.writeEnd();
    System.err.println("Syntax error in program");
:};


statement_list ::= statement_list SEMICOLON statement | statement;

statement ::= open_statement | closed_statement;

compound_statement ::= BEGIN statement_list END;

open_statement ::= open_if_statement
                | open_while_statement
                | open_for_statement;
closed_statement ::= assignment_statement
                | closed_if_statement
                | closed_while_statement
                | closed_for_statement
                | repeat_statement
                | compound_statement
                | write_statement
                | read_statement
                | ;

open_if_statement ::= IF boolean_expr THEN statement{:

:}
                | IF boolean_expr THEN closed_statement ELSE open_statement {:
:};
open_while_statement ::= WHILE boolean_expr DO open_statement {:
:};
open_for_statement ::= FOR control_variable ASSIGNMENT initial_value TO final_value DO open_statement {:
:};


closed_if_statement ::= IF boolean_expr THEN closed_statement ELSE closed_statement{:
:};
closed_while_statement ::= WHILE boolean_expr DO closed_statement{:
:};
closed_for_statement ::= FOR control_variable ASSIGNMENT initial_value TO final_value DO closed_statement {:
:};
repeat_statement ::= REPEAT statement_list UNTIL boolean_expres {:
:};


control_variable ::= IDENTIFIER {:
:};
initial_value ::= expression {:
:};
final_value ::= expression {:
:};




assignment_statment ::= IDENTIFIER:id ASSIGN cexpr {:
    String name = ((CustomSymbol)id).getToken().getValue().toString();
    int index = getVarIndex(name);
    emitter.addCommand(new Command("istore", String.valueOf(index)));
:};

write_statement ::= WRITE LPAREN IDENTIFIER:id RPAREN {:
    String name = ((CustomSymbol)id).getToken().getValue().toString();
    int index = getVarIndex(name);
    emitter.addCommand(new Command("getstatic", "java/lang/System/out", "Ljava/io/PrintStream;"));
    emitter.addCommand(new Command("iload", String.valueOf(index) ));
    emitter.addCommand(new Command("invokevirtual", "java/io/PrintStream/println(I)V"));
:};
read_statement ::= READ LPAREN IDENTIFIER:id RPAREN{:
    String name = ((CustomSymbol)id).getToken().getValue().toString();
    int index = getVarIndex(name);
    emitter.addCommand(new Command("new",  "java/util/Scanner"));
    emitter.addCommand(new Command("dup"));
    emitter.addCommand(new Command("getstatic", "java/lang/System/in ", "Ljava/io/InputStream;"));
    emitter.addCommand(new Command("invokespecial", "java/util/Scanner/<init>(Ljava/io/InputStream;)V"));
    emitter.addCommand(new Command("invokevirtual", "java/util/Scanner/nextInt()I"));
    emitter.addCommand(new Command("istore" + String.valueOf(index)));
:};

cexpr ::=  csimple_expr LT csimple_expr {:
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        emitter.addCommand(new Command("if_icmplt", "L" + String.valueOf(trueIndex)));
        emitter.addCommand(new Command("iconst_0"));
        emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
        emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
        emitter.addCommand(new Command("iconst_1"));
        emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
    :}
                | csimple_expr GT csimple_expr {:
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        emitter.addCommand(new Command("if_icmpgt", "L" + String.valueOf(trueIndex)));
        emitter.addCommand(new Command("iconst_0"));
        emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
        emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
        emitter.addCommand(new Command("iconst_1"));
        emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
    :}
                | csimple_expr LEQ csimple_expr {:
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        emitter.addCommand(new Command("if_icmple", "L" + String.valueOf(trueIndex)));
        emitter.addCommand(new Command("iconst_0"));
        emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
        emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
        emitter.addCommand(new Command("iconst_1"));
        emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
    :}
                | csimple_expr GEQ csimple_expr {:
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        emitter.addCommand(new Command("if_icmpge", "L" + String.valueOf(trueIndex)));
        emitter.addCommand(new Command("iconst_0"));
        emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
        emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
        emitter.addCommand(new Command("iconst_1"));
        emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
    :}
                | csimple_expr EQ csimple_expr{:
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        emitter.addCommand(new Command("if_icmpeq", "L" + String.valueOf(trueIndex)));
        emitter.addCommand(new Command("iconst_0"));
        emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
        emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
        emitter.addCommand(new Command("iconst_1"));
        emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
    :}
                | csimple_expr NEQ csimple_expr {:
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        emitter.addCommand(new Command("if_icmpne", "L" + String.valueOf(trueIndex)));
        emitter.addCommand(new Command("iconst_0"));
        emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
        emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
        emitter.addCommand(new Command("iconst_1"));
        emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
    :}          |
    csimple_expr;

csimple_expr ::= cterm
                | csimple_expr PLUS cterm {:
        emitter.addCommand(new Command("iadd"));
    :}
                | csimple_expr MINUS cterm {:
        emitter.addCommand(new Command("isub"));
    :}
                | csimple_expr OR cterm {:
        emitter.addCommand(new Command("ior"));
    :};

cterm ::= cfactor
                | cterm STAR cfactor {:
        emitter.addCommand(new Command("imul"));
    :}
                | cterm DIV cfactor:b {:
        emitter.addCommand(new Command("idiv"));
    :}
                | cterm AND cfactor {:
        emitter.addCommand(new Command("iand"));
    :};

cfactor ::= NOT cfactor {:
        emitter.addCommand(new Command("ineg"));
    :}
                   | NUMBER:n {:
        emitter.addCommand(new Command("bipush", String.valueOf(n)));
    :}
                   | IDENTIFIER:id {:
        String name = (String)((CustomSymbol)id).getToken().getValue();
        int index = getVarIndex(name);
        emitter.addCommand(new Command("iload", String.valueOf(index)));
    :}
                   | LPAREN cexpr RPAREN {:
    :}
                   | BOOLEAN_LITERAL:lit{:
       if(lit == true){
            emitter.addCommand(new Command("iconst_1"));
       } else {
            emitter.addCommand(new Command("iconst_0"));
       }
    :};

boolean_expr ::= boolean_simple_expr
                    | boolean_simple_expr LT boolean_simple_expr {:
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            emitter.addCommand(new Command("if_icmplt", "L" + String.valueOf(trueIndex)));
            emitter.addCommand(new Command("iconst_0"));
            emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
            emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
            emitter.addCommand(new Command("iconst_1"));
            emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
                    :}
                    | boolean_simple_expr GT boolean_simple_expr {:
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            emitter.addCommand(new Command("if_icmpgt", "L" + String.valueOf(trueIndex)));
            emitter.addCommand(new Command("iconst_0"));
            emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
            emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
            emitter.addCommand(new Command("iconst_1"));
            emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
                    :}
                    | boolean_simple_expr LEQ boolean_simple_expr {:
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            emitter.addCommand(new Command("if_icmple", "L" + String.valueOf(trueIndex)));
            emitter.addCommand(new Command("iconst_0"));
            emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
            emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
            emitter.addCommand(new Command("iconst_1"));
            emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
                    :}
                    | boolean_simple_expr GEQ boolean_simple_expr {:
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            emitter.addCommand(new Command("if_icmpge", "L" + String.valueOf(trueIndex)));
            emitter.addCommand(new Command("iconst_0"));
            emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
            emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
            emitter.addCommand(new Command("iconst_1"));
            emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
                    :}
                    | boolean_simple_expr EQ boolean_simple_expr {:
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            emitter.addCommand(new Command("if_icmpeq", "L" + String.valueOf(trueIndex)));
            emitter.addCommand(new Command("iconst_0"));
            emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
            emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
            emitter.addCommand(new Command("iconst_1"));
            emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
                    :}
                    | boolean_simple_expr NEQ boolean_simple_expr {:
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            emitter.addCommand(new Command("if_icmpne", "L" + String.valueOf(trueIndex)));
            emitter.addCommand(new Command("iconst_0"));
            emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
            emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
            emitter.addCommand(new Command("iconst_1"));
            emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
                    :};

boolean_simple_expr ::= boolean_term
                    | boolean_simple_expr PLUS boolean_term {:
            emitter.addCommand(new Command("iadd"));
                    :}
                    | boolean_simple_expr MINUS boolean_term {:
            emitter.addCommand(new Command("isub"));
                    :}
                    | boolean_simple_expr OR boolean_term
                    {:
            emitter.addCommand(new Command("ior"));
                    :};

boolean_term ::= boolean_factor
                    | boolean_term STAR boolean_factor {:
            emitter.addCommand(new Command("imul"));
                    :}
                    | boolean_term DIV boolean_factor {:
            emitter.addCommand(new Command("idiv"));
                    :}
                    | boolean_term AND boolean_factor {:
            emitter.addCommand(new Command("iand"));
                    :};


boolean_factor ::= NOT boolean_factor {:
            emitter.addCommand(new Command("ineg"));
:}
                | NUMBER:n {:
            emitter.addCommand(new Command("bipush", String.valueOf(n)));
:}
                | IDENTIFIER:id {:
            String name = (String)((CustomSymbol)id).getToken().getValue();
            int index = getVarIndex(name);
            emitter.addCommand(new Command("iload", String.valueOf(index)));
                :}
                | BOOLEAN_LITERAL:lit {:
            if(lit == true){
                emitter.addCommand(new Command("iconst_1"));
            } else {
                emitter.addCommand(new Command("iconst_0"));
            }
:}
                | LPAREN boolean_expr:e RPAREN {:
:};