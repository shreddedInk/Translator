package ru.omsu.translator.cup;

import java.util.HashMap;
import java.util.Map;
import java_cup.runtime.*;
import ru.omsu.translator.CustomSymbol;
import ru.omsu.translator.Token;

parser code {:
    protected java_cup.runtime.Scanner scanner;
    protected Map<String, Integer> varIndexes = new HashMap<>();
    protected int varCounter = 0;
    protected StringBuilder jasmin = new StringBuilder();

    public void setScanner(java_cup.runtime.Scanner s) {
            this.scanner = s;
    }

    public void debugPrintState(Symbol token) {
        System.out.println("Processing token: " + token.sym + ", Value: " + token.value);
    }


    public void setSymbolFactory(java_cup.runtime.SymbolFactory sf) {
            this.symbolFactory = sf;
        }

    private int getVarIndex(String varName) {
        return varIndexes.computeIfAbsent(varName, k -> varCounter++);
    }

    private void emit(String code) {
        jasmin.append("    ").append(code).append("\n");
    }

    public String getJasminCode() {
        return jasmin.toString();
    }
:};

scan with {:
    return scanner.next_token();
:};

terminal CustomSymbol OPERATOR, KEYWORD, IDENTIFIER, STRING,
                      NUMBER, CHAR,
                      LPAREN, RPAREN, LBRACKET, RBRACKET,
                      BEGIN, END, WRITE, READ, ASSIGN,
                      SEMICOLON;


non terminal program, statement_list, statement;
non terminal String expr, term, factor;

precedence left OPERATOR;
precedence left SEMICOLON;
precedence left END;

program ::= BEGIN statement_list END
    {:
        System.out.println(".class public Main");
        System.out.println(".super java/lang/Object");
        System.out.println(".method public static main([Ljava/lang/String;)V");
        System.out.println("    .limit stack 100");
        System.out.println("    .limit locals 100");
        System.out.print(jasmin.toString());
        System.out.println("    return");
        System.out.println(".end method");
    :}
    | error
    {: System.err.println("Syntax error in program"); :};

statement_list ::= statement SEMICOLON statement_list
                 | /* empty */;

statement ::= IDENTIFIER:id ASSIGN expr:e SEMICOLON
    {:
        debugPrintState(id);
        String name = (String)((CustomSymbol)id).getToken().getValue();
        int index = getVarIndex(name);
        emit(e);
        emit("istore " + index);
    :}
           | WRITE LPAREN IDENTIFIER:id RPAREN SEMICOLON
    {:
        String name = (String)((CustomSymbol)id).getToken().getValue();
        int index = getVarIndex(name);
        emit("getstatic java/lang/System/out Ljava/io/PrintStream;");
        emit("iload " + index);
        emit("invokevirtual java/io/PrintStream/println(I)V");
    :}
           | READ LPAREN IDENTIFIER:id RPAREN SEMICOLON
    {:
        String name = (String)((CustomSymbol)id).getToken().getValue();
        int index = getVarIndex(name);
        emit("new java/util/Scanner");
        emit("dup");
        emit("getstatic java/lang/System/in Ljava/io/InputStream;");
        emit("invokespecial java/util/Scanner/<init>(Ljava/io/InputStream;)V");
        emit("invokevirtual java/util/Scanner/nextInt()I");
        emit("istore " + index);
    :};

expr ::= expr:a OPERATOR:op term:b
    {:
        String operator = (String)((CustomSymbol)op).getToken().getValue();
        switch (operator) {
            case "+": emit("iadd"); break;
            case "-": emit("isub"); break;
        }
    :}
      | term;

term ::= term:a OPERATOR:op factor:b
    {:
        String operator = (String)((CustomSymbol)op).getToken().getValue();
        switch (operator) {
            case "*": emit("imul"); break;
            case "/": emit("idiv"); break;
        }
    :}
     | factor;

factor ::= NUMBER:n
    {:
        int val = (Integer)((CustomSymbol)n).getToken().getValue();
        emit("ldc " + val);
    :}
         | IDENTIFIER:id
    {:
        String name = (String)((CustomSymbol)id).getToken().getValue();
        int index = getVarIndex(name);
        emit("iload " + index);
    :}
         | LPAREN expr:e RPAREN
    {: :};


