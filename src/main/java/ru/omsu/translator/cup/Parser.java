
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ru.omsu.translator.cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import ru.omsu.translator.data.PascalLexer;
import ru.omsu.translator.java.Data;
import ru.omsu.translator.java.CustomSymbol;
import ru.omsu.translator.emitter.Emitter;
import ru.omsu.translator.emitter.Formatter;
import ru.omsu.translator.emitter.Command;
import ru.omsu.translator.emitter.Method;
import ru.omsu.translator.cup.CodeFragment;
import ru.omsu.translator.java.type_control.TypesTable;
import ru.omsu.translator.java.type_control.TypeExpression;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\002\003\000\002\003\005\000\002\004\005" +
    "\000\002\004\003\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\010\005\000\002\010\003\000\002" +
    "\011\003\000\002\011\003\000\002\007\005\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\002\000\002\014\006\000\002\014" +
    "\010\000\002\015\006\000\002\016\012\000\002\020\010" +
    "\000\002\021\006\000\002\022\012\000\002\023\006\000" +
    "\002\027\003\000\002\030\003\000\002\017\005\000\002" +
    "\024\006\000\002\025\006\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\003\000\002\032\003\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\033\003\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\034\004\000\002\034\003\000\002\034\003" +
    "\000\002\034\005\000\002\034\003\000\002\035\003\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\036" +
    "\003\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\037\003\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\040\004\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\010\003\006\004\007\047\004\001\002\000" +
    "\004\006\222\001\002\000\004\002\220\001\002\000\004" +
    "\002\ufffe\001\002\000\026\004\030\005\uffe7\006\016\034" +
    "\025\035\012\036\023\041\015\042\036\045\037\051\uffe7" +
    "\001\002\000\004\004\011\001\002\000\026\004\030\005" +
    "\uffe7\006\016\034\025\035\012\036\023\041\015\042\036" +
    "\045\037\051\uffe7\001\002\000\004\030\212\001\002\000" +
    "\010\005\ufff5\046\ufff5\051\ufff5\001\002\000\010\005\ufff6" +
    "\046\ufff6\051\ufff6\001\002\000\014\006\050\017\052\030" +
    "\054\053\044\054\046\001\002\000\004\020\204\001\002" +
    "\000\010\005\ufff4\046\ufff4\051\ufff4\001\002\000\010\005" +
    "\ufff0\046\ufff0\051\ufff0\001\002\000\012\005\uffec\040\uffec" +
    "\046\uffec\051\uffec\001\002\000\012\005\uffef\040\uffef\046" +
    "\uffef\051\uffef\001\002\000\014\006\050\017\052\030\054" +
    "\053\044\054\046\001\002\000\012\005\uffea\040\uffea\046" +
    "\uffea\051\uffea\001\002\000\004\030\172\001\002\000\010" +
    "\005\ufff1\046\ufff1\051\ufff1\001\002\000\010\005\ufff2\046" +
    "\ufff2\051\ufff2\001\002\000\026\004\030\005\uffe7\006\016" +
    "\034\025\035\012\036\023\041\015\042\036\045\037\051" +
    "\uffe7\001\002\000\006\005\166\051\042\001\002\000\012" +
    "\005\uffe9\040\uffe9\046\uffe9\051\uffe9\001\002\000\012\005" +
    "\uffe8\040\uffe8\046\uffe8\051\uffe8\001\002\000\012\005\uffed" +
    "\040\uffed\046\uffed\051\uffed\001\002\000\012\005\uffeb\040" +
    "\uffeb\046\uffeb\051\uffeb\001\002\000\004\006\111\001\002" +
    "\000\026\004\030\006\016\034\025\035\012\036\023\041" +
    "\015\042\036\045\037\046\uffe7\051\uffe7\001\002\000\012" +
    "\005\uffee\040\uffee\046\uffee\051\uffee\001\002\000\006\046" +
    "\043\051\042\001\002\000\030\004\030\005\uffe7\006\016" +
    "\034\025\035\012\036\023\041\015\042\036\045\037\046" +
    "\uffe7\051\uffe7\001\002\000\014\006\050\017\052\030\054" +
    "\053\044\054\046\001\002\000\050\005\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\031\uffb3\037\uffb3\040" +
    "\uffb3\043\uffb3\046\uffb3\051\uffb3\001\002\000\050\005\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\073\015\075\016\074\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\031\uffbe" +
    "\037\uffbe\040\uffbe\043\uffbe\046\uffbe\051\uffbe\001\002\000" +
    "\050\005\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5" +
    "\016\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\031\uffb5\037\uffb5\040\uffb5\043\uffb5\046\uffb5\051\uffb5" +
    "\001\002\000\042\005\uffc5\011\062\012\060\013\067\021" +
    "\063\022\061\023\066\024\064\025\070\026\065\031\uffc5" +
    "\037\uffc5\040\uffc5\043\uffc5\046\uffc5\051\uffc5\001\002\000" +
    "\050\005\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\031\uffb4\037\uffb4\040\uffb4\043\uffb4\046\uffb4\051\uffb4" +
    "\001\002\000\050\005\uffba\011\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\031\uffba\037\uffba\040\uffba\043\uffba\046" +
    "\uffba\051\uffba\001\002\000\014\006\050\017\052\030\054" +
    "\053\044\054\046\001\002\000\012\005\uffdf\040\uffdf\046" +
    "\uffdf\051\uffdf\001\002\000\014\006\050\017\052\030\054" +
    "\053\044\054\046\001\002\000\004\031\056\001\002\000" +
    "\050\005\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\031\uffb2\037\uffb2\040\uffb2\043\uffb2\046\uffb2\051\uffb2" +
    "\001\002\000\050\005\uffb6\011\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\016\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\031\uffb6\037\uffb6\040\uffb6\043\uffb6\046" +
    "\uffb6\051\uffb6\001\002\000\014\006\050\017\052\030\054" +
    "\053\044\054\046\001\002\000\014\006\050\017\052\030" +
    "\054\053\044\054\046\001\002\000\014\006\050\017\052" +
    "\030\054\053\044\054\046\001\002\000\014\006\050\017" +
    "\052\030\054\053\044\054\046\001\002\000\014\006\050" +
    "\017\052\030\054\053\044\054\046\001\002\000\014\006" +
    "\050\017\052\030\054\053\044\054\046\001\002\000\014" +
    "\006\050\017\052\030\054\053\044\054\046\001\002\000" +
    "\014\006\050\017\052\030\054\053\044\054\046\001\002" +
    "\000\014\006\050\017\052\030\054\053\044\054\046\001" +
    "\002\000\026\005\uffc2\011\062\012\060\013\067\031\uffc2" +
    "\037\uffc2\040\uffc2\043\uffc2\046\uffc2\051\uffc2\001\002\000" +
    "\050\005\uffbb\011\uffbb\012\uffbb\013\uffbb\014\073\015\075" +
    "\016\074\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\031\uffbb\037\uffbb\040\uffbb\043\uffbb\046\uffbb\051\uffbb" +
    "\001\002\000\014\006\050\017\052\030\054\053\044\054" +
    "\046\001\002\000\014\006\050\017\052\030\054\053\044" +
    "\054\046\001\002\000\014\006\050\017\052\030\054\053" +
    "\044\054\046\001\002\000\050\005\uffb8\011\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\016\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\031\uffb8\037\uffb8\040\uffb8" +
    "\043\uffb8\046\uffb8\051\uffb8\001\002\000\050\005\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\031\uffb7\037" +
    "\uffb7\040\uffb7\043\uffb7\046\uffb7\051\uffb7\001\002\000\050" +
    "\005\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\031\uffb9\037\uffb9\040\uffb9\043\uffb9\046\uffb9\051\uffb9\001" +
    "\002\000\026\005\uffc4\011\062\012\060\013\067\031\uffc4" +
    "\037\uffc4\040\uffc4\043\uffc4\046\uffc4\051\uffc4\001\002\000" +
    "\026\005\uffc1\011\062\012\060\013\067\031\uffc1\037\uffc1" +
    "\040\uffc1\043\uffc1\046\uffc1\051\uffc1\001\002\000\026\005" +
    "\uffc3\011\062\012\060\013\067\031\uffc3\037\uffc3\040\uffc3" +
    "\043\uffc3\046\uffc3\051\uffc3\001\002\000\026\005\uffc0\011" +
    "\062\012\060\013\067\031\uffc0\037\uffc0\040\uffc0\043\uffc0" +
    "\046\uffc0\051\uffc0\001\002\000\050\005\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\014\073\015\075\016\074\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\031\uffbd\037\uffbd\040" +
    "\uffbd\043\uffbd\046\uffbd\051\uffbd\001\002\000\026\005\uffbf" +
    "\011\062\012\060\013\067\031\uffbf\037\uffbf\040\uffbf\043" +
    "\uffbf\046\uffbf\051\uffbf\001\002\000\050\005\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\014\073\015\075\016\074\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\031\uffbc\037\uffbc" +
    "\040\uffbc\043\uffbc\046\uffbc\051\uffbc\001\002\000\010\005" +
    "\ufff7\046\ufff7\051\ufff7\001\002\000\004\020\112\001\002" +
    "\000\014\006\121\017\122\030\123\053\114\054\115\001" +
    "\002\000\004\044\uffde\001\002\000\050\005\uffc6\011\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\031\uffc6\040\uffc6" +
    "\043\uffc6\044\uffc6\046\uffc6\051\uffc6\001\002\000\050\005" +
    "\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\031" +
    "\uffc9\040\uffc9\043\uffc9\044\uffc9\046\uffc9\051\uffc9\001\002" +
    "\000\050\005\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\031\uffce\040\uffce\043\uffce\044\uffce\046\uffce\051" +
    "\uffce\001\002\000\004\044\160\001\002\000\050\005\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\140\015\142\016\141\021" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\031\uffd2" +
    "\040\uffd2\043\uffd2\044\uffd2\046\uffd2\051\uffd2\001\002\000" +
    "\050\005\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\031\uffc8\040\uffc8\043\uffc8\044\uffc8\046\uffc8\051\uffc8" +
    "\001\002\000\014\006\121\017\122\030\123\053\114\054" +
    "\115\001\002\000\014\006\121\017\122\030\123\053\114" +
    "\054\115\001\002\000\042\005\uffd3\011\127\012\125\013" +
    "\134\021\130\022\126\023\133\024\131\025\135\026\132" +
    "\031\uffd3\040\uffd3\043\uffd3\044\uffd3\046\uffd3\051\uffd3\001" +
    "\002\000\014\006\121\017\122\030\123\053\114\054\115" +
    "\001\002\000\014\006\121\017\122\030\123\053\114\054" +
    "\115\001\002\000\014\006\121\017\122\030\123\053\114" +
    "\054\115\001\002\000\014\006\121\017\122\030\123\053" +
    "\114\054\115\001\002\000\014\006\121\017\122\030\123" +
    "\053\114\054\115\001\002\000\014\006\121\017\122\030" +
    "\123\053\114\054\115\001\002\000\014\006\121\017\122" +
    "\030\123\053\114\054\115\001\002\000\014\006\121\017" +
    "\122\030\123\053\114\054\115\001\002\000\014\006\121" +
    "\017\122\030\123\053\114\054\115\001\002\000\026\005" +
    "\uffd7\011\127\012\125\013\134\031\uffd7\040\uffd7\043\uffd7" +
    "\044\uffd7\046\uffd7\051\uffd7\001\002\000\050\005\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\140\015\142\016\141\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\031\uffcf\040" +
    "\uffcf\043\uffcf\044\uffcf\046\uffcf\051\uffcf\001\002\000\014" +
    "\006\121\017\122\030\123\053\114\054\115\001\002\000" +
    "\014\006\121\017\122\030\123\053\114\054\115\001\002" +
    "\000\014\006\121\017\122\030\123\053\114\054\115\001" +
    "\002\000\050\005\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\031\uffcc\040\uffcc\043\uffcc\044\uffcc\046\uffcc" +
    "\051\uffcc\001\002\000\050\005\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\031\uffcb\040\uffcb\043\uffcb\044" +
    "\uffcb\046\uffcb\051\uffcb\001\002\000\050\005\uffcd\011\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\031\uffcd\040\uffcd" +
    "\043\uffcd\044\uffcd\046\uffcd\051\uffcd\001\002\000\026\005" +
    "\uffd9\011\127\012\125\013\134\031\uffd9\040\uffd9\043\uffd9" +
    "\044\uffd9\046\uffd9\051\uffd9\001\002\000\026\005\uffd6\011" +
    "\127\012\125\013\134\031\uffd6\040\uffd6\043\uffd6\044\uffd6" +
    "\046\uffd6\051\uffd6\001\002\000\026\005\uffd8\011\127\012" +
    "\125\013\134\031\uffd8\040\uffd8\043\uffd8\044\uffd8\046\uffd8" +
    "\051\uffd8\001\002\000\026\005\uffd5\011\127\012\125\013" +
    "\134\031\uffd5\040\uffd5\043\uffd5\044\uffd5\046\uffd5\051\uffd5" +
    "\001\002\000\050\005\uffd1\011\uffd1\012\uffd1\013\uffd1\014" +
    "\140\015\142\016\141\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\031\uffd1\040\uffd1\043\uffd1\044\uffd1\046" +
    "\uffd1\051\uffd1\001\002\000\026\005\uffd4\011\127\012\125" +
    "\013\134\031\uffd4\040\uffd4\043\uffd4\044\uffd4\046\uffd4\051" +
    "\uffd4\001\002\000\050\005\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\140\015\142\016\141\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\031\uffd0\040\uffd0\043\uffd0\044\uffd0" +
    "\046\uffd0\051\uffd0\001\002\000\004\031\156\001\002\000" +
    "\050\005\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\031\uffc7\040\uffc7\043\uffc7\044\uffc7\046\uffc7\051\uffc7" +
    "\001\002\000\050\005\uffca\011\uffca\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\021\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\031\uffca\040\uffca\043\uffca\044\uffca\046" +
    "\uffca\051\uffca\001\002\000\014\006\121\017\122\030\123" +
    "\053\114\054\115\001\002\000\004\043\uffdd\001\002\000" +
    "\004\043\163\001\002\000\032\004\030\005\uffe7\006\016" +
    "\034\025\035\012\036\023\040\uffe7\041\015\042\036\045" +
    "\037\046\uffe7\051\uffe7\001\002\000\010\005\uffe3\046\uffe3" +
    "\051\uffe3\001\002\000\012\005\uffe0\040\uffe0\046\uffe0\051" +
    "\uffe0\001\002\000\004\052\167\001\002\000\004\002\000" +
    "\001\002\000\006\005\171\051\042\001\002\000\012\005" +
    "\ufff3\040\ufff3\046\ufff3\051\ufff3\001\002\000\004\006\173" +
    "\001\002\000\004\031\174\001\002\000\012\005\uffdb\040" +
    "\uffdb\046\uffdb\051\uffdb\001\002\000\004\037\176\001\002" +
    "\000\032\004\030\005\uffe7\006\016\034\025\035\012\036" +
    "\023\040\uffe7\041\015\042\036\045\037\046\uffe7\051\uffe7" +
    "\001\002\000\010\005\uffe6\046\uffe6\051\uffe6\001\002\000" +
    "\012\005\ufff4\040\201\046\ufff4\051\ufff4\001\002\000\032" +
    "\004\030\005\uffe7\006\016\034\025\035\012\036\023\040" +
    "\uffe7\041\015\042\036\045\037\046\uffe7\051\uffe7\001\002" +
    "\000\010\005\uffe5\046\uffe5\051\uffe5\001\002\000\012\005" +
    "\uffe2\040\uffe2\046\uffe2\051\uffe2\001\002\000\014\006\121" +
    "\017\122\030\123\053\114\054\115\001\002\000\012\005" +
    "\uffdc\040\uffdc\046\uffdc\051\uffdc\001\002\000\004\043\207" +
    "\001\002\000\032\004\030\005\uffe7\006\016\034\025\035" +
    "\012\036\023\040\uffe7\041\015\042\036\045\037\046\uffe7" +
    "\051\uffe7\001\002\000\010\005\uffe4\046\uffe4\051\uffe4\001" +
    "\002\000\012\005\uffe1\040\uffe1\046\uffe1\051\uffe1\001\002" +
    "\000\004\006\213\001\002\000\004\031\214\001\002\000" +
    "\012\005\uffda\040\uffda\046\uffda\051\uffda\001\002\000\006" +
    "\005\216\051\042\001\002\000\004\052\217\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\001\001\002\000\004" +
    "\051\230\001\002\000\004\050\224\001\002\000\004\051" +
    "\ufffb\001\002\000\010\055\225\056\226\057\227\001\002" +
    "\000\004\051\ufffa\001\002\000\004\051\ufff9\001\002\000" +
    "\004\051\ufff8\001\002\000\006\004\ufffd\006\222\001\002" +
    "\000\004\051\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\006\002\004\003\007\001\001\000\006\004" +
    "\220\005\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\007\023\010\214\011\013\012\012\013\016\014" +
    "\026\015\025\016\017\017\021\020\037\021\033\022\020" +
    "\023\034\024\031\025\032\001\001\000\002\001\001\000" +
    "\040\007\023\010\030\011\013\012\012\013\016\014\026" +
    "\015\025\016\017\017\021\020\037\021\033\022\020\023" +
    "\034\024\031\025\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\035\205\036\046\037" +
    "\044\040\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\035\174\036\046\037\044\040\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\007\023\010\167\011\013\012\012\013\016" +
    "\014\026\015\025\016\017\017\021\020\037\021\033\022" +
    "\020\023\034\024\031\025\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\007\023\010\040" +
    "\011\013\012\012\013\016\014\026\015\025\016\017\017" +
    "\021\020\037\021\033\022\020\023\034\024\031\025\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\007" +
    "\023\011\107\012\012\013\016\014\026\015\025\016\017" +
    "\017\021\020\037\021\033\022\020\023\034\024\031\025" +
    "\032\001\001\000\012\035\052\036\046\037\044\040\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\056\001\001\000\002\001\001\000\012\035" +
    "\054\036\046\037\044\040\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\037\106\040" +
    "\050\001\001\000\010\036\105\037\044\040\050\001\001" +
    "\000\006\037\104\040\050\001\001\000\010\036\103\037" +
    "\044\040\050\001\001\000\010\036\102\037\044\040\050" +
    "\001\001\000\010\036\101\037\044\040\050\001\001\000" +
    "\010\036\100\037\044\040\050\001\001\000\006\037\071" +
    "\040\050\001\001\000\010\036\070\037\044\040\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\077" +
    "\001\001\000\004\040\076\001\001\000\004\040\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\027" +
    "\116\031\112\032\123\033\117\034\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\156\001\001\000\012\031\154\032\123\033" +
    "\117\034\115\001\001\000\002\001\001\000\006\033\153" +
    "\034\115\001\001\000\010\032\152\033\117\034\115\001" +
    "\001\000\006\033\151\034\115\001\001\000\010\032\150" +
    "\033\117\034\115\001\001\000\010\032\147\033\117\034" +
    "\115\001\001\000\010\032\146\033\117\034\115\001\001" +
    "\000\010\032\145\033\117\034\115\001\001\000\006\033" +
    "\136\034\115\001\001\000\010\032\135\033\117\034\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\144\001\001\000\004\034\143\001\001\000\004\034\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\030\161\031\160\032\123\033\117\034" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\023\012\163\013\164\014\026\015\025\016\017\017" +
    "\021\020\037\021\033\022\020\023\034\024\031\025\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\007\023\011\176\012\012\013\177" +
    "\014\026\015\025\016\017\017\021\020\037\021\033\022" +
    "\020\023\034\024\031\025\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\007\023\012\201\013\202\014" +
    "\026\015\025\016\017\017\021\020\037\021\033\022\020" +
    "\023\034\024\031\025\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\031\204\032\123\033\117\034\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\007" +
    "\023\012\207\013\210\014\026\015\025\016\017\017\021" +
    "\020\037\021\033\022\020\023\034\024\031\025\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\230\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    System.out.println("старт парсинга");

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    java_cup.runtime.Symbol res = scanner.next_token();
    System.out.println("переход к след токену (CUP)" + res);
    return res;

    }


    protected java_cup.runtime.Scanner scanner;
    protected Emitter emitter;
    protected Map<String, Integer> varIndexes = new HashMap<>();
    protected int varCounter = 0;
    protected int labelCounter = 0;

    public void setScanner(java_cup.runtime.Scanner s) {
        System.out.println(s);
        this.scanner = s;
    }

    public void setEmitter(Emitter emitter) {
        this.emitter = emitter;

        emitter.writeStart();
        Method main = new Method("main", "V", new String[]{"public", "static"}, new String[]{"[Ljava/lang/String;"});
        emitter.addMethod(main);
        emitter.openMethod(main);
        emitter.addCommand(new Command(".limit stack 100"));
        emitter.addCommand(new Command(".limit locals 100"));
    }

    public void setSymbolFactory(java_cup.runtime.SymbolFactory sf) {
        System.out.println(sf);
        this.symbolFactory = sf;
    }

    private int getVarIndex(String varName) {
        return varIndexes.computeIfAbsent(varName, k -> varCounter++);
    }

    private int getLabelIndex() {
        return labelCounter++;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CodeFragment start_val = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= variable_declaration_part BEGIN statement_list END DOT 
            {
              CodeFragment RESULT =null;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment statement_list = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    CodeFragment code =  new CodeFragment();
    code.add(statement_list);
    for(String codeStr: code.getCode()) {
            emitter.addCommand(new Command(codeStr));
    }
    emitter.addCommand(new Command("return"));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= BEGIN statement_list END DOT 
            {
              CodeFragment RESULT =null;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment statement_list = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    CodeFragment code = statement_list;
    for(String codeStr: code.getCode()) {
        emitter.addCommand(new Command(codeStr));
    }
    emitter.addCommand(new Command("return"));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= error 
            {
              CodeFragment RESULT =null;
		
    emitter.writeEnd();
    System.err.println("Syntax error in program");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // variable_declaration_part ::= VAR variable_declaration_list SEMICOLON 
            {
              CodeFragment RESULT =null;
		int variable_declaration_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int variable_declaration_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CodeFragment variable_declaration_list = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variable_declaration_list ::= variable_declaration_list SEMICOLON variable_declaration 
            {
              CodeFragment RESULT =null;
		int variable_declaration_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variable_declaration_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment variable_declaration_list = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int variable_declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variable_declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment variable_declaration = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variable_declaration_list ::= variable_declaration 
            {
              CodeFragment RESULT =null;
		int variable_declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variable_declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment variable_declaration = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variable_declaration ::= IDENTIFIER COLON INTEGER 
            {
              CodeFragment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CustomSymbol id = (CustomSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable_declaration ::= IDENTIFIER COLON REAL 
            {
              CodeFragment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CustomSymbol id = (CustomSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable_declaration ::= IDENTIFIER COLON BOOLEAN 
            {
              CodeFragment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CustomSymbol id = (CustomSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement_list ::= statement_list SEMICOLON statement 
            {
              CodeFragment RESULT =null;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment statement_list = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    CodeFragment code = new CodeFragment();
    code.add(statement_list);
    code.add(statement);
    RESULT = code;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement_list ::= statement 
            {
              CodeFragment RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = statement;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= open_statement 
            {
              CodeFragment RESULT =null;
		int open_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int open_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment open_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = open_statement;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= closed_statement 
            {
              CodeFragment RESULT =null;
		int closed_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int closed_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment closed_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = closed_statement;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // compound_statement ::= BEGIN statement_list END 
            {
              CodeFragment RESULT =null;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CodeFragment statement_list = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = statement_list;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // open_statement ::= open_if_statement 
            {
              CodeFragment RESULT =null;
		int open_if_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int open_if_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment open_if_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = open_if_statement;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("open_statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // open_statement ::= open_while_statement 
            {
              CodeFragment RESULT =null;
		int open_while_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int open_while_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment open_while_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = open_while_statement;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("open_statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // open_statement ::= open_for_statement 
            {
              CodeFragment RESULT =null;
		int open_for_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int open_for_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment open_for_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = open_for_statement;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("open_statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // closed_statement ::= assignment_statement 
            {
              CodeFragment RESULT =null;
		int assignment_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assignment_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment assignment_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = assignment_statement;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closed_statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // closed_statement ::= closed_if_statement 
            {
              CodeFragment RESULT =null;
		int closed_if_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int closed_if_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment closed_if_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = closed_if_statement;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closed_statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // closed_statement ::= closed_while_statement 
            {
              CodeFragment RESULT =null;
		int closed_while_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int closed_while_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment closed_while_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = closed_while_statement;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closed_statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // closed_statement ::= closed_for_statement 
            {
              CodeFragment RESULT =null;
		int closed_for_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int closed_for_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment closed_for_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = closed_for_statement;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closed_statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // closed_statement ::= repeat_statement 
            {
              CodeFragment RESULT =null;
		int repeat_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int repeat_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment repeat_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = repeat_statement;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closed_statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // closed_statement ::= compound_statement 
            {
              CodeFragment RESULT =null;
		int compound_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int compound_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment compound_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = compound_statement;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closed_statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // closed_statement ::= write_statement 
            {
              CodeFragment RESULT =null;
		int write_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int write_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment write_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = write_statement;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closed_statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // closed_statement ::= read_statement 
            {
              CodeFragment RESULT =null;
		int read_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int read_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment read_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = read_statement;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closed_statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // closed_statement ::= 
            {
              CodeFragment RESULT =null;
		
    RESULT = new CodeFragment();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closed_statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // open_if_statement ::= IF boolean_expr THEN statement 
            {
              CodeFragment RESULT =null;
		int boolean_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boolean_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment boolean_expr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int true_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int true_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment true_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    CodeFragment code = new CodeFragment();
    code.add(boolean_expr);
    int trueIndex = getLabelIndex();
    int endIndex = getLabelIndex();
    code.add("ifne", "L" + String.valueOf(trueIndex));
    code.add("goto", "L" + String.valueOf(endIndex));
    code.add("L" + String.valueOf(trueIndex) + ":");
    code.add(true_statement);
    code.add("L" + String.valueOf(endIndex) + ":");
    RESULT = code;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("open_if_statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // open_if_statement ::= IF boolean_expr THEN closed_statement ELSE open_statement 
            {
              CodeFragment RESULT =null;
		int boolean_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int boolean_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		CodeFragment boolean_expr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int true_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int true_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment true_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int false_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int false_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment false_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    CodeFragment code = new CodeFragment();
    code.add(boolean_expr);
    int trueIndex = getLabelIndex();
    int falseIndex = getLabelIndex();
    int endIndex = getLabelIndex();
    code.add("ifne", "L" + String.valueOf(trueIndex));
    code.add(false_statement);
    code.add("goto", "L" + String.valueOf(endIndex));
    code.add("L" + String.valueOf(trueIndex) + ":");
    code.add(true_statement);
    code.add("L" + String.valueOf(endIndex) + ":");
    RESULT = code;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("open_if_statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // open_while_statement ::= WHILE boolean_expr DO open_statement 
            {
              CodeFragment RESULT =null;
		int boolean_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boolean_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment boolean_expr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int open_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int open_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment open_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    CodeFragment code = new CodeFragment();
    code.add(boolean_expr);
    int loop_start_index = getLabelIndex();
    int loop_end_index = getLabelIndex();
    code.add("L" + String.valueOf(loop_start_index) + ":");
    code.add(boolean_expr);
    code.add("ifeq", "L" + String.valueOf(loop_end_index));
    code.add(open_statement);
    code.add("goto", "L" + String.valueOf(loop_start_index));
    code.add("L" + String.valueOf(loop_end_index) + ":");
    RESULT = code;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("open_while_statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // open_for_statement ::= FOR IDENTIFIER ASSIGN initial_value TO final_value DO open_statement 
            {
              CodeFragment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		CustomSymbol id = (CustomSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int initial_valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int initial_valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		CodeFragment initial_value = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int final_valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int final_valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment final_value = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int open_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int open_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment open_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    CodeFragment code = new CodeFragment();
    String name = (String)((CustomSymbol)id).getToken().getValue();
    int var_index = getVarIndex(name);
    code.add(initial_value);
    code.add("istore", String.valueOf(var_index));
    int loop_start_index = getLabelIndex();
    int loop_end_index = getLabelIndex();
    code.add("L" + String.valueOf(loop_start_index) + ":");
    code.add("iload", String.valueOf(var_index));
    code.add(final_value);
    code.add("if_icmpgt", "L" + String.valueOf(loop_end_index));
    code.add(open_statement);
    code.add("iinc", String.valueOf(var_index), "1");
    code.add("goto", "L" + String.valueOf(loop_start_index));
    code.add("L" + String.valueOf(loop_end_index) + ":");
    RESULT = code;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("open_for_statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // closed_if_statement ::= IF boolean_expr THEN closed_statement ELSE closed_statement 
            {
              CodeFragment RESULT =null;
		int boolean_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int boolean_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		CodeFragment boolean_expr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int true_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int true_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment true_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int false_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int false_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment false_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    CodeFragment code = new CodeFragment();
    code.add(boolean_expr);
    int trueIndex = getLabelIndex();
    int falseIndex = getLabelIndex();
    int endIndex = getLabelIndex();
    code.add("ifne", "L" + String.valueOf(trueIndex));
    code.add(false_statement);
    code.add("goto", "L" + String.valueOf(endIndex));
    code.add("L" + String.valueOf(trueIndex) + ":");
    code.add(true_statement);
    code.add("L" + String.valueOf(endIndex) + ":");
    RESULT = code;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closed_if_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // closed_while_statement ::= WHILE boolean_expr DO closed_statement 
            {
              CodeFragment RESULT =null;
		int boolean_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boolean_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment boolean_expr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int closed_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int closed_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment closed_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    CodeFragment code = new CodeFragment();
    code.add(boolean_expr);
    int loop_start_index = getLabelIndex();
    int loop_end_index = getLabelIndex();
    code.add("L" + String.valueOf(loop_start_index) + ":");
    code.add(boolean_expr);
    code.add("ifeq", "L" + String.valueOf(loop_end_index));
    code.add(closed_statement);
    code.add("goto", "L" + String.valueOf(loop_start_index));
    code.add("L" + String.valueOf(loop_end_index) + ":");
    RESULT = code;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closed_while_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // closed_for_statement ::= FOR IDENTIFIER ASSIGN initial_value TO final_value DO closed_statement 
            {
              CodeFragment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		CustomSymbol id = (CustomSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int initial_valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int initial_valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		CodeFragment initial_value = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int final_valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int final_valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment final_value = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int closed_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int closed_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment closed_statement = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    CodeFragment code = new CodeFragment();
    String name = (String)((CustomSymbol)id).getToken().getValue();
    int var_index = getVarIndex(name);
    code.add(initial_value);
    code.add("istore", String.valueOf(var_index));
    int loop_start_index = getLabelIndex();
    int loop_end_index = getLabelIndex();
    code.add("L" + String.valueOf(loop_start_index) + ":");
    code.add("iload", String.valueOf(var_index));
    code.add(final_value);
    code.add("if_icmpgt", "L" + String.valueOf(loop_end_index));
    code.add(closed_statement);
    code.add("iinc", String.valueOf(var_index), "1");
    code.add("goto", "L" + String.valueOf(loop_start_index));
    code.add("L" + String.valueOf(loop_end_index) + ":");
    RESULT = code;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closed_for_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // repeat_statement ::= REPEAT statement_list UNTIL boolean_expr 
            {
              CodeFragment RESULT =null;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment statement_list = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boolean_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_expr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    CodeFragment code = new CodeFragment();
    int loop_start_index = getLabelIndex();
    int loop_end_index = getLabelIndex();
    code.add("L" + String.valueOf(loop_start_index) + ":");
    code.add(statement_list);
    code.add(boolean_expr);
    code.add("ifne", "L" + String.valueOf(loop_end_index));
    code.add("goto", "L" + String.valueOf(loop_start_index));
    code.add("L" + String.valueOf(loop_end_index) + ":");
    RESULT = code;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // initial_value ::= cexpr 
            {
              CodeFragment RESULT =null;
		int cexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment cexpr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = cexpr;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // final_value ::= cexpr 
            {
              CodeFragment RESULT =null;
		int cexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment cexpr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = cexpr;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("final_value",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assignment_statement ::= IDENTIFIER ASSIGN cexpr 
            {
              CodeFragment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CustomSymbol id = (CustomSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment cexpr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String name = ((CustomSymbol)id).getToken().getValue().toString();
    int index = getVarIndex(name);
    CodeFragment code = new CodeFragment();
    code.add(cexpr);
    code.add("istore", String.valueOf(index));
    RESULT = code;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // write_statement ::= WRITE LPAREN IDENTIFIER RPAREN 
            {
              CodeFragment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CustomSymbol id = (CustomSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    String name = ((CustomSymbol)id).getToken().getValue().toString();
    int index = getVarIndex(name);
    CodeFragment code = new CodeFragment();
    code.add("getstatic", "java/lang/System/out", "Ljava/io/PrintStream;");
    code.add("iload", String.valueOf(index) );
    code.add("invokevirtual", "java/io/PrintStream/print(I)V");
    RESULT = code;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // read_statement ::= READ LPAREN IDENTIFIER RPAREN 
            {
              CodeFragment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CustomSymbol id = (CustomSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    String name = ((CustomSymbol)id).getToken().getValue().toString();
    int index = getVarIndex(name);
    CodeFragment code = new CodeFragment();
    code.add("new",  "java/util/Scanner");
    code.add("dup");
    code.add("getstatic", "java/lang/System/in ", "Ljava/io/InputStream;");
    code.add("invokespecial", "java/util/Scanner/<init>(Ljava/io/InputStream;)V");
    code.add("invokevirtual", "java/util/Scanner/nextInt()I");
    code.add("istore" + String.valueOf(index));
    RESULT = code;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cexpr ::= csimple_expr LT csimple_expr 
            {
              CodeFragment RESULT =null;
		int csimple_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int csimple_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment csimple_expr_1 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csimple_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csimple_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment csimple_expr_2 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        CodeFragment code = new CodeFragment();
        code.add(csimple_expr_1);
        code.add(csimple_expr_2);
        code.add("if_icmplt", "L" + String.valueOf(trueIndex));
        code.add("iconst_0");
        code.add("goto", "L" + String.valueOf(endIndex));
        code.add("L" + String.valueOf(trueIndex) + ":");
        code.add("iconst_1");
        code.add("L" + String.valueOf(endIndex) + ":");
        RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexpr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cexpr ::= csimple_expr GT csimple_expr 
            {
              CodeFragment RESULT =null;
		int csimple_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int csimple_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment csimple_expr_1 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csimple_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csimple_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment csimple_expr_2 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        CodeFragment code = new CodeFragment();
        code.add(csimple_expr_1);
        code.add(csimple_expr_2);
        code.add("if_icmpgt", "L" + String.valueOf(trueIndex));
        code.add("iconst_0");
        code.add("goto", "L" + String.valueOf(endIndex));
        code.add("L" + String.valueOf(trueIndex) + ":");
        code.add("iconst_1");
        code.add("L" + String.valueOf(endIndex) + ":");
        RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexpr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cexpr ::= csimple_expr LEQ csimple_expr 
            {
              CodeFragment RESULT =null;
		int csimple_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int csimple_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment csimple_expr_1 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csimple_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csimple_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment csimple_expr_2 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        CodeFragment code = new CodeFragment();
        code.add(csimple_expr_1);
        code.add(csimple_expr_2);
        code.add("if_icmple", "L" + String.valueOf(trueIndex));
        code.add("iconst_0");
        code.add("goto", "L" + String.valueOf(endIndex));
        code.add("L" + String.valueOf(trueIndex) + ":");
        code.add("iconst_1");
        code.add("L" + String.valueOf(endIndex) + ":");
        RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexpr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cexpr ::= csimple_expr GEQ csimple_expr 
            {
              CodeFragment RESULT =null;
		int csimple_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int csimple_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment csimple_expr_1 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csimple_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csimple_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment csimple_expr_2 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        CodeFragment code = new CodeFragment();
        code.add(csimple_expr_1);
        code.add(csimple_expr_2);
        code.add("if_icmpge", "L" + String.valueOf(trueIndex));
        code.add("iconst_0");
        code.add("goto", "L" + String.valueOf(endIndex));
        code.add("L" + String.valueOf(trueIndex) + ":");
        code.add("iconst_1");
        code.add("L" + String.valueOf(endIndex) + ":");
        RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexpr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cexpr ::= csimple_expr EQ csimple_expr 
            {
              CodeFragment RESULT =null;
		int csimple_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int csimple_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment csimple_expr_1 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csimple_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csimple_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment csimple_expr_2 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        CodeFragment code = new CodeFragment();
        code.add(csimple_expr_1);
        code.add(csimple_expr_2);
        code.add("if_icmpeq", "L" + String.valueOf(trueIndex));
        code.add("iconst_0");
        code.add("goto", "L" + String.valueOf(endIndex));
        code.add("L" + String.valueOf(trueIndex) + ":");
        code.add("iconst_1");
        code.add("L" + String.valueOf(endIndex) + ":");
        RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexpr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cexpr ::= csimple_expr NEQ csimple_expr 
            {
              CodeFragment RESULT =null;
		int csimple_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int csimple_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment csimple_expr_1 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csimple_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csimple_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment csimple_expr_2 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        CodeFragment code = new CodeFragment();
        code.add(csimple_expr_1);
        code.add(csimple_expr_2);
        code.add("if_icmpne", "L" + String.valueOf(trueIndex));
        code.add("iconst_0");
        code.add("goto", "L"+ String.valueOf(endIndex));
        code.add("L" + String.valueOf(trueIndex) + ":");
        code.add("iconst_1");
        code.add("L" + String.valueOf(endIndex) + ":");
        RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexpr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cexpr ::= csimple_expr 
            {
              CodeFragment RESULT =null;
		int csimple_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csimple_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment csimple_expr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = csimple_expr;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexpr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // csimple_expr ::= cterm 
            {
              CodeFragment RESULT =null;
		int ctermleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ctermright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment cterm = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = cterm;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("csimple_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // csimple_expr ::= csimple_expr PLUS cterm 
            {
              CodeFragment RESULT =null;
		int csimple_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int csimple_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment csimple_expr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ctermleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ctermright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment cterm = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        CodeFragment code = new CodeFragment();
        code.add(csimple_expr);
        code.add(cterm);
        code.add("iadd");
        RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("csimple_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // csimple_expr ::= csimple_expr MINUS cterm 
            {
              CodeFragment RESULT =null;
		int csimple_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int csimple_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment csimple_expr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ctermleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ctermright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment cterm = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        CodeFragment code = new CodeFragment();
        code.add(csimple_expr);
        code.add(cterm);
        code.add("isub");
        RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("csimple_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // csimple_expr ::= csimple_expr OR cterm 
            {
              CodeFragment RESULT =null;
		int csimple_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int csimple_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment csimple_expr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ctermleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ctermright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment cterm = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        CodeFragment code = new CodeFragment();
        code.add(csimple_expr);
        code.add(cterm);
        code.add("ior");
        RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("csimple_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cterm ::= cfactor 
            {
              CodeFragment RESULT =null;
		int cfactorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfactorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment cfactor = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = cfactor;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cterm",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cterm ::= cterm STAR cfactor 
            {
              CodeFragment RESULT =null;
		int ctermleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ctermright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment cterm = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfactorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfactorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment cfactor = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        CodeFragment code = new CodeFragment();
        code.add(cterm);
        code.add(cfactor);
        code.add("imul");
        RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cterm",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cterm ::= cterm DIV cfactor 
            {
              CodeFragment RESULT =null;
		int ctermleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ctermright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment cterm = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfactorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfactorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment cfactor = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        CodeFragment code = new CodeFragment();
        code.add(cterm);
        code.add(cfactor);
        code.add("idiv");
        RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cterm",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cterm ::= cterm AND cfactor 
            {
              CodeFragment RESULT =null;
		int ctermleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ctermright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment cterm = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfactorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfactorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment cfactor = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        CodeFragment code = new CodeFragment();
        code.add(cterm);
        code.add(cfactor);
        code.add("iand");
        RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cterm",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cfactor ::= NOT cfactor 
            {
              CodeFragment RESULT =null;
		int cfactorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfactorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment cfactor = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        CodeFragment code = new CodeFragment();
        code.add(cfactor);
        code.add("ineg");
        RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfactor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cfactor ::= NUMBER 
            {
              CodeFragment RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        CodeFragment code = new CodeFragment();
        code.add("ldc", String.valueOf(n));
        RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfactor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cfactor ::= IDENTIFIER 
            {
              CodeFragment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CustomSymbol id = (CustomSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        CodeFragment code = new CodeFragment();
        String name = (String)((CustomSymbol)id).getToken().getValue();
        int index = getVarIndex(name);
        code.add("iload", String.valueOf(index));
        RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfactor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cfactor ::= LPAREN cexpr RPAREN 
            {
              CodeFragment RESULT =null;
		int cexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CodeFragment cexpr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = cexpr;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfactor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cfactor ::= BOOLEAN_LITERAL 
            {
              CodeFragment RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean lit = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       CodeFragment code = new CodeFragment();
       if(lit == true){
            code.add("iconst_1");
       } else {
            code.add("iconst_0");
       }
       RESULT = code;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfactor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // boolean_expr ::= boolean_simple_expr 
            {
              CodeFragment RESULT =null;
		int boolean_simple_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_simple_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_simple_expr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = boolean_simple_expr;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // boolean_expr ::= boolean_simple_expr LT boolean_simple_expr 
            {
              CodeFragment RESULT =null;
		int boolean_simple_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boolean_simple_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment boolean_simple_expr_1 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boolean_simple_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_simple_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_simple_expr_2 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            CodeFragment code = new CodeFragment();
            code.add(boolean_simple_expr_1);
            code.add(boolean_simple_expr_2);
            code.add("if_icmplt", "L" + String.valueOf(trueIndex));
            code.add("iconst_0");
            code.add("goto", "L" + String.valueOf(endIndex));
            code.add("L" + String.valueOf(trueIndex) + ":");
            code.add("iconst_1");
            code.add("L" + String.valueOf(endIndex) + ":");
            RESULT = code;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // boolean_expr ::= boolean_simple_expr GT boolean_simple_expr 
            {
              CodeFragment RESULT =null;
		int boolean_simple_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boolean_simple_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment boolean_simple_expr_1 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boolean_simple_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_simple_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_simple_expr_2 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            CodeFragment code = new CodeFragment();
            code.add(boolean_simple_expr_1);
            code.add(boolean_simple_expr_2);
            code.add("if_icmpgt", "L" + String.valueOf(trueIndex));
            code.add("iconst_0");
            code.add("goto", "L" + String.valueOf(endIndex));
            code.add("L" + String.valueOf(trueIndex) + ":");
            code.add("iconst_1");
            code.add("L" + String.valueOf(endIndex) + ":");
            RESULT = code;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // boolean_expr ::= boolean_simple_expr LEQ boolean_simple_expr 
            {
              CodeFragment RESULT =null;
		int boolean_simple_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boolean_simple_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment boolean_simple_expr_1 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boolean_simple_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_simple_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_simple_expr_2 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            CodeFragment code = new CodeFragment();
            code.add(boolean_simple_expr_1);
            code.add(boolean_simple_expr_2);
            code.add("if_icmple", "L" + String.valueOf(trueIndex));
            code.add("iconst_0");
            code.add("goto", "L" + String.valueOf(endIndex));
            code.add("L" + String.valueOf(trueIndex) + ":");
            code.add("iconst_1");
            code.add("L" + String.valueOf(endIndex) + ":");
            RESULT = code;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // boolean_expr ::= boolean_simple_expr GEQ boolean_simple_expr 
            {
              CodeFragment RESULT =null;
		int boolean_simple_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boolean_simple_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment boolean_simple_expr_1 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boolean_simple_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_simple_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_simple_expr_2 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            CodeFragment code = new CodeFragment();
            code.add(boolean_simple_expr_1);
            code.add(boolean_simple_expr_2);
            code.add("if_icmpge", "L" + String.valueOf(trueIndex));
            code.add("iconst_0");
            code.add("goto", "L" + String.valueOf(endIndex));
            code.add("L" + String.valueOf(trueIndex) + ":");
            code.add("iconst_1");
            code.add("L" + String.valueOf(endIndex) + ":");
            RESULT = code;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // boolean_expr ::= boolean_simple_expr EQ boolean_simple_expr 
            {
              CodeFragment RESULT =null;
		int boolean_simple_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boolean_simple_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment boolean_simple_expr_1 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boolean_simple_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_simple_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_simple_expr_2 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            CodeFragment code = new CodeFragment();
            code.add(boolean_simple_expr_1);
            code.add(boolean_simple_expr_2);
            code.add("if_icmpeq", "L" + String.valueOf(trueIndex));
            code.add("iconst_0");
            code.add("goto", "L" + String.valueOf(endIndex));
            code.add("L" + String.valueOf(trueIndex) + ":");
            code.add("iconst_1");
            code.add("L" + String.valueOf(endIndex) + ":");
            RESULT = code;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // boolean_expr ::= boolean_simple_expr NEQ boolean_simple_expr 
            {
              CodeFragment RESULT =null;
		int boolean_simple_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boolean_simple_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment boolean_simple_expr_1 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boolean_simple_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_simple_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_simple_expr_2 = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            CodeFragment code = new CodeFragment();
            code.add(boolean_simple_expr_1);
            code.add(boolean_simple_expr_2);
            code.add("if_icmpne", "L" + String.valueOf(trueIndex));
            code.add("iconst_0");
            code.add("goto", "L" + String.valueOf(endIndex));
            code.add("L" + String.valueOf(trueIndex) + ":");
            code.add("iconst_1");
            code.add("L" + String.valueOf(endIndex) + ":");
            RESULT = code;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // boolean_simple_expr ::= boolean_term 
            {
              CodeFragment RESULT =null;
		int boolean_termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_term = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = boolean_term;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_simple_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // boolean_simple_expr ::= boolean_simple_expr PLUS boolean_term 
            {
              CodeFragment RESULT =null;
		int boolean_simple_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boolean_simple_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment boolean_simple_expr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boolean_termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_term = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            CodeFragment code = new CodeFragment();
            code.add(boolean_simple_expr);
            code.add(boolean_term);
            code.add("iadd");
            RESULT = code;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_simple_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // boolean_simple_expr ::= boolean_simple_expr MINUS boolean_term 
            {
              CodeFragment RESULT =null;
		int boolean_simple_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boolean_simple_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment boolean_simple_expr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boolean_termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_term = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            CodeFragment code = new CodeFragment();
            code.add(boolean_simple_expr);
            code.add(boolean_term);
            code.add("isub");
            RESULT = code;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_simple_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // boolean_simple_expr ::= boolean_simple_expr OR boolean_term 
            {
              CodeFragment RESULT =null;
		int boolean_simple_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boolean_simple_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment boolean_simple_expr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boolean_termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_term = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            CodeFragment code = new CodeFragment();
            code.add(boolean_simple_expr);
            code.add(boolean_term);
            code.add("ior");
            RESULT = code;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_simple_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // boolean_term ::= boolean_factor 
            {
              CodeFragment RESULT =null;
		int boolean_factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_factor = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = boolean_factor;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_term",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // boolean_term ::= boolean_term STAR boolean_factor 
            {
              CodeFragment RESULT =null;
		int boolean_termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boolean_termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment boolean_term = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boolean_factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_factor = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            CodeFragment code = new CodeFragment();
            code.add(boolean_term);
            code.add(boolean_factor);
            code.add("imul");
            RESULT = code;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_term",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // boolean_term ::= boolean_term DIV boolean_factor 
            {
              CodeFragment RESULT =null;
		int boolean_termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boolean_termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment boolean_term = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boolean_factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_factor = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            CodeFragment code = new CodeFragment();
            code.add(boolean_term);
            code.add(boolean_factor);
            code.add("idiv");
            RESULT = code;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_term",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // boolean_term ::= boolean_term AND boolean_factor 
            {
              CodeFragment RESULT =null;
		int boolean_termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boolean_termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CodeFragment boolean_term = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boolean_factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_factor = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            CodeFragment code = new CodeFragment();
            code.add(boolean_term);
            code.add(boolean_factor);
            code.add("iand");
            RESULT = code;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_term",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // boolean_factor ::= NOT boolean_factor 
            {
              CodeFragment RESULT =null;
		int boolean_factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolean_factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CodeFragment boolean_factor = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            CodeFragment code = new CodeFragment();
            code.add(boolean_factor);
            code.add("ineg");
            RESULT = code;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // boolean_factor ::= NUMBER 
            {
              CodeFragment RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            CodeFragment code = new CodeFragment();
            code.add("ldc", String.valueOf(n));
            RESULT = code;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // boolean_factor ::= IDENTIFIER 
            {
              CodeFragment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CustomSymbol id = (CustomSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            CodeFragment code = new CodeFragment();
            String name = (String)((CustomSymbol)id).getToken().getValue();
            int index = getVarIndex(name);
            code.add("iload", String.valueOf(index));
            RESULT = code;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // boolean_factor ::= BOOLEAN_LITERAL 
            {
              CodeFragment RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean lit = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            CodeFragment code = new CodeFragment();
            if(lit == true){
                code.add("iconst_1");
            } else {
                code.add("iconst_0");
            }
            RESULT = code;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // boolean_factor ::= LPAREN boolean_expr RPAREN 
            {
              CodeFragment RESULT =null;
		int boolean_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int boolean_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CodeFragment boolean_expr = (CodeFragment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = boolean_expr;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
