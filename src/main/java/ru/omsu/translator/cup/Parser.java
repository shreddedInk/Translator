
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ru.omsu.translator.cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import ru.omsu.translator.data.PascalLexer;
import ru.omsu.translator.java.Data;
import ru.omsu.translator.java.CustomSymbol;
import ru.omsu.translator.emitter.Emitter;
import ru.omsu.translator.emitter.Formatter;
import ru.omsu.translator.emitter.Command;
import ru.omsu.translator.emitter.Method;
import ru.omsu.translator.java.TypesTable;
import ru.omsu.translator.java.type_control.TypeExpression;
import ru.omsu.translator.java.type_control.Type;
import ru.omsu.translator.java.TypeException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\002\003\000\002\003\003\000\002\003\002" +
    "\000\002\017\004\000\002\020\005\000\002\020\003\000" +
    "\002\021\005\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\004\005\000\002\004\003\000\002\005" +
    "\005\000\002\005\006\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\003\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\003" +
    "\000\002\012\004\000\002\012\003\000\002\012\003\000" +
    "\002\012\005\000\002\012\003\000\002\013\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\014\003" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\015\003\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\016\004\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\010\003\006\004\007\037\004\001\002\000" +
    "\004\006\076\001\002\000\004\002\074\001\002\000\004" +
    "\002\ufffe\001\002\000\010\005\ufffc\006\016\036\014\001" +
    "\002\000\004\004\011\001\002\000\010\005\ufffc\006\016" +
    "\036\014\001\002\000\006\005\ufffd\041\070\001\002\000" +
    "\004\005\067\001\002\000\004\032\064\001\002\000\006" +
    "\005\ufff3\041\ufff3\001\002\000\004\022\017\001\002\000" +
    "\014\006\025\007\021\010\022\021\026\032\027\001\002" +
    "\000\006\005\ufff2\041\ufff2\001\002\000\040\005\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\033\uffdd\041" +
    "\uffdd\001\002\000\040\005\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\033\uffe0\041\uffe0\001\002\000\040" +
    "\005\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\033\uffe2\041\uffe2\001\002\000\040\005\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\044\017\046\020\045\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\033\uffe6\041\uffe6\001" +
    "\002\000\040\005\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\033\uffdf\041\uffdf\001\002\000\014\006\025" +
    "\007\021\010\022\021\026\032\027\001\002\000\014\006" +
    "\025\007\021\010\022\021\026\032\027\001\002\000\032" +
    "\005\uffea\013\033\014\031\015\040\023\034\024\032\025" +
    "\037\026\035\027\041\030\036\033\uffea\041\uffea\001\002" +
    "\000\014\006\025\007\021\010\022\021\026\032\027\001" +
    "\002\000\014\006\025\007\021\010\022\021\026\032\027" +
    "\001\002\000\014\006\025\007\021\010\022\021\026\032" +
    "\027\001\002\000\014\006\025\007\021\010\022\021\026" +
    "\032\027\001\002\000\014\006\025\007\021\010\022\021" +
    "\026\032\027\001\002\000\014\006\025\007\021\010\022" +
    "\021\026\032\027\001\002\000\014\006\025\007\021\010" +
    "\022\021\026\032\027\001\002\000\014\006\025\007\021" +
    "\010\022\021\026\032\027\001\002\000\014\006\025\007" +
    "\021\010\022\021\026\032\027\001\002\000\016\005\uffee" +
    "\013\033\014\031\015\040\033\uffee\041\uffee\001\002\000" +
    "\040\005\uffe7\013\uffe7\014\uffe7\015\uffe7\016\044\017\046" +
    "\020\045\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\033\uffe7\041\uffe7\001\002\000\014\006\025\007\021" +
    "\010\022\021\026\032\027\001\002\000\014\006\025\007" +
    "\021\010\022\021\026\032\027\001\002\000\014\006\025" +
    "\007\021\010\022\021\026\032\027\001\002\000\040\005" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\033" +
    "\uffe4\041\uffe4\001\002\000\040\005\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\033\uffe3\041\uffe3\001\002" +
    "\000\040\005\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\033\uffe5\041\uffe5\001\002\000\016\005\ufff0\013" +
    "\033\014\031\015\040\033\ufff0\041\ufff0\001\002\000\016" +
    "\005\uffed\013\033\014\031\015\040\033\uffed\041\uffed\001" +
    "\002\000\016\005\uffef\013\033\014\031\015\040\033\uffef" +
    "\041\uffef\001\002\000\016\005\uffec\013\033\014\031\015" +
    "\040\033\uffec\041\uffec\001\002\000\040\005\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\044\017\046\020\045\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\033\uffe9\041\uffe9" +
    "\001\002\000\016\005\uffeb\013\033\014\031\015\040\033" +
    "\uffeb\041\uffeb\001\002\000\040\005\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\044\017\046\020\045\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\033\uffe8\041\uffe8\001\002" +
    "\000\004\033\062\001\002\000\040\005\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\033\uffde\041\uffde\001" +
    "\002\000\040\005\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\033\uffe1\041\uffe1\001\002\000\004\006\065" +
    "\001\002\000\004\033\066\001\002\000\006\005\ufff1\041" +
    "\ufff1\001\002\000\004\002\000\001\002\000\006\006\016" +
    "\036\014\001\002\000\006\005\ufff4\041\ufff4\001\002\000" +
    "\004\005\073\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\001\001\002\000\006\004\ufffb\041\105\001\002\000" +
    "\004\040\100\001\002\000\006\004\ufff9\041\ufff9\001\002" +
    "\000\010\042\101\043\102\044\104\001\002\000\006\004" +
    "\ufff7\041\ufff7\001\002\000\006\004\ufff5\041\ufff5\001\002" +
    "\000\006\004\ufff8\041\ufff8\001\002\000\006\004\ufff6\041" +
    "\ufff6\001\002\000\004\006\076\001\002\000\006\004\ufffa" +
    "\041\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\006\002\004\017\007\001\001\000\006\020" +
    "\074\021\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\071\004\011\005\014\001\001\000\002\001" +
    "\001\000\010\003\012\004\011\005\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\017\010\027\011\023" +
    "\012\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\062\001\001\000\012\007\060\010" +
    "\027\011\023\012\022\001\001\000\002\001\001\000\006" +
    "\011\057\012\022\001\001\000\010\010\056\011\023\012" +
    "\022\001\001\000\006\011\055\012\022\001\001\000\010" +
    "\010\054\011\023\012\022\001\001\000\010\010\053\011" +
    "\023\012\022\001\001\000\010\010\052\011\023\012\022" +
    "\001\001\000\010\010\051\011\023\012\022\001\001\000" +
    "\006\011\042\012\022\001\001\000\010\010\041\011\023" +
    "\012\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\050\001\001\000\004\012\047\001\001\000\004" +
    "\012\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\105\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    System.out.println("старт парсинга");

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    java_cup.runtime.Symbol res = scanner.next_token();
    System.out.println("переход к след токену (CUP)" + res);
    return res;

    }


    protected java_cup.runtime.Scanner scanner;
    protected Emitter emitter;
    protected Map<String, Integer> varIndexes = new HashMap<>();
    protected int varCounter = 0;
    protected int labelCounter = 0;
    public void setScanner (java_cup.runtime.Scanner s) {
            System.out.println(s);
            this.scanner = s;
        }
    public void setEmitter (Emitter emitter) {
            this.emitter = emitter;

            emitter.writeStart();
            Method main = new Method("main", "V", new String[]{"public", "static"}, new String[]{"[Ljava/lang/String;"});
            emitter.addMethod(main);
            emitter.openMethod(main);
            emitter.addCommand(new Command(".limit stack 100"));
            emitter.addCommand(new Command(".limit locals 100"));
        }
    public void setSymbolFactory(java_cup.runtime.SymbolFactory sf) {
            System.out.println(sf);
            this.symbolFactory = sf;
        }
    private int getVarIndex(String varName) {
            return varIndexes.computeIfAbsent(varName, k -> varCounter++);
    }
    private int getLabelIndex() {
        return labelCounter++;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= variable_declaration_part BEGIN optional_statements END 
            {
              Object RESULT =null;
		
    emitter.addCommand(new Command("return"));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= BEGIN optional_statements END 
            {
              Object RESULT =null;
		
    emitter.addCommand(new Command("return"));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= error 
            {
              Object RESULT =null;
		
    emitter.writeEnd();
    System.err.println("Syntax error in program");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // optional_statements ::= statement_list 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optional_statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variable_declaration_part ::= VAR variable_declaration_list 
            {
              Object RESULT =null;
		

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variable_declaration_list ::= variable_declaration_list SEMICOLON variable_declaration 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable_declaration_list ::= variable_declaration 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable_declaration ::= IDENTIFIER COLON type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CustomSymbol id = (CustomSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeExpression type = (TypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String varName = ((CustomSymbol)id).getToken().getValue().toString();
    TypesTable.addType(varName, type);
    System.out.println("Assigned " + type + " to " + varName);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= INTEGER 
            {
              TypeExpression RESULT =null;
		
    RESULT = new TypeExpression().integer();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= BOOLEAN 
            {
              TypeExpression RESULT =null;
		
    RESULT = new TypeExpression().bool();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= REAL 
            {
              TypeExpression RESULT =null;
		
    RESULT = new TypeExpression().real();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement_list ::= statement_list SEMICOLON statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement_list ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= IDENTIFIER ASSIGN cexpr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CustomSymbol id = (CustomSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    String name = ((CustomSymbol)id).getToken().getValue().toString();
    int index = getVarIndex(name);
    emitter.addCommand(new Command("istore", String.valueOf(index)));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= WRITE LPAREN IDENTIFIER RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CustomSymbol id = (CustomSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    String name = ((CustomSymbol)id).getToken().getValue().toString();
    int index = getVarIndex(name);
    emitter.addCommand(new Command("getstatic", "java/lang/System/out Ljava/io/PrintStream;"));
    emitter.addCommand(new Command("iload", String.valueOf(index) ));
    emitter.addCommand(new Command("invokevirtual", "java/io/PrintStream/println(I)V"));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cexpr ::= csimple_expr LT csimple_expr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a+"<"+b;
        if ((TypesTable.getType(a).getName() == Type.REAL || TypesTable.getType(a).getName() == Type.INTEGER) && (TypesTable.getType(b).getName() == Type.INTEGER|| TypesTable.getType(b).getName() == Type.REAL)){
            TypesTable.addType(a+"<"+b,new TypeExpression().bool());
        }
        else{
            throw new TypeException("unsupported operation '<' between "+TypesTable.getType(a)+" and "+TypesTable.getType(b));
        }
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        emitter.addCommand(new Command("if_icmplt", "L" + String.valueOf(trueIndex)));
        emitter.addCommand(new Command("iconst_0"));
        emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
        emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
        emitter.addCommand(new Command("iconst_1"));
        emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cexpr ::= csimple_expr GT csimple_expr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = a+">"+b;
                if ((TypesTable.getType(a).getName() == Type.REAL || TypesTable.getType(a).getName() == Type.INTEGER) && (TypesTable.getType(b).getName() == Type.INTEGER|| TypesTable.getType(b).getName() == Type.REAL)){
                    TypesTable.addType(a+">"+b,new TypeExpression().bool());
                }
                else{
                    throw new TypeException("unsupported operation '>' between "+TypesTable.getType(a)+" and "+TypesTable.getType(b));
                }
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        emitter.addCommand(new Command("if_icmpgt", "L" + String.valueOf(trueIndex)));
        emitter.addCommand(new Command("iconst_0"));
        emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
        emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
        emitter.addCommand(new Command("iconst_1"));
        emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cexpr ::= csimple_expr LEQ csimple_expr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = a+"<="+b;
                if ((TypesTable.getType(a).getName() == Type.REAL || TypesTable.getType(a).getName() == Type.INTEGER) && (TypesTable.getType(b).getName() == Type.INTEGER|| TypesTable.getType(b).getName() == Type.REAL)){
                    TypesTable.addType(a+"<="+b,new TypeExpression().bool());
                }
                else{
                    throw new TypeException("unsupported operation '<=' between "+TypesTable.getType(a)+" and "+TypesTable.getType(b));
                }
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        emitter.addCommand(new Command("if_icmple", "L" + String.valueOf(trueIndex)));
        emitter.addCommand(new Command("iconst_0"));
        emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
        emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
        emitter.addCommand(new Command("iconst_1"));
        emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cexpr ::= csimple_expr GEQ csimple_expr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = a+">="+b;
                if ((TypesTable.getType(a).getName() == Type.REAL || TypesTable.getType(a).getName() == Type.INTEGER) && (TypesTable.getType(b).getName() == Type.INTEGER|| TypesTable.getType(b).getName() == Type.REAL)){
                    TypesTable.addType(a+">="+b,new TypeExpression().bool());
                }
                else{
                    throw new TypeException("unsupported operation '>=' between "+TypesTable.getType(a)+" and "+TypesTable.getType(b));
                }
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        emitter.addCommand(new Command("if_icmpge", "L" + String.valueOf(trueIndex)));
        emitter.addCommand(new Command("iconst_0"));
        emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
        emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
        emitter.addCommand(new Command("iconst_1"));
        emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cexpr ::= csimple_expr EQ csimple_expr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = a+"="+b;
                        if ((TypesTable.getType(a).getName() == Type.REAL || TypesTable.getType(a).getName() == Type.INTEGER) && (TypesTable.getType(b).getName() == Type.INTEGER|| TypesTable.getType(b).getName() == Type.REAL)){
                            TypesTable.addType(a+"="+b,new TypeExpression().bool());
                        }
                        else{
                            throw new TypeException("unsupported operation '=' between "+TypesTable.getType(a)+" and "+TypesTable.getType(b));
                        }
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        emitter.addCommand(new Command("if_icmpeq", "L" + String.valueOf(trueIndex)));
        emitter.addCommand(new Command("iconst_0"));
        emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
        emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
        emitter.addCommand(new Command("iconst_1"));
        emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cexpr ::= csimple_expr NEQ csimple_expr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = a+"<>"+b;
                        if ((TypesTable.getType(a).getName() == Type.REAL || TypesTable.getType(a).getName() == Type.INTEGER) && (TypesTable.getType(b).getName() == Type.INTEGER|| TypesTable.getType(b).getName() == Type.REAL)){
                            TypesTable.addType(a+"<>"+b,new TypeExpression().bool());
                        }
                        else{
                            throw new TypeException("unsupported operation '<>' between "+TypesTable.getType(a)+" and "+TypesTable.getType(b));
                        }
        int trueIndex= getLabelIndex();
        int endIndex = getLabelIndex();
        emitter.addCommand(new Command("if_icmpne", "L" + String.valueOf(trueIndex)));
        emitter.addCommand(new Command("iconst_0"));
        emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
        emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
        emitter.addCommand(new Command("iconst_1"));
        emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cexpr ::= csimple_expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // csimple_expr ::= csimple_expr PLUS cterm 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                System.out.println(a+"+++++"+b);
                if (TypesTable.getType(a).getName() == Type.INTEGER && TypesTable.getType(b).getName() == Type.INTEGER){
                    TypesTable.addType(a+"+"+b,new TypeExpression().integer());
                }
                else if(TypesTable.getType(a).getName() == Type.REAL || TypesTable.getType(b).getName() == Type.REAL){
                    TypesTable.addType(a+"+"+b,new TypeExpression().real());
                }
                else{
                    throw new TypeException("unsupported operation '*' between "+TypesTable.getType(a)+" and "+TypesTable.getType(b));
                }
//
        emitter.addCommand(new Command("iadd"));
//        else throw new TypeException("wrong types");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("csimple_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // csimple_expr ::= csimple_expr MINUS cterm 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if (TypesTable.getType(a).getName() == Type.INTEGER && TypesTable.getType(b).getName() == Type.INTEGER){
                                    TypesTable.addType(a+"-"+b,new TypeExpression().integer());
                                }
                                else if(TypesTable.getType(a).getName() == Type.REAL || TypesTable.getType(b).getName() == Type.REAL){
                                    TypesTable.addType(a+"-"+b,new TypeExpression().real());
                                }
                                else{
                                    throw new TypeException("unsupported operation '-' between "+TypesTable.getType(a)+" and "+TypesTable.getType(b));
                                }
        emitter.addCommand(new Command("isub"));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("csimple_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // csimple_expr ::= csimple_expr OR cterm 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = String.valueOf(a)+"|"+String.valueOf(b);
                if (TypesTable.getType(a).getName() == Type.BOOLEAN && TypesTable.getType(b).getName() == Type.BOOLEAN){
                    TypesTable.addType(a+"|"+b,new TypeExpression().integer());
                    emitter.addCommand(new Command("iand"));
                }
                else{
                    throw new TypeException("unsupported operation 'or' between "+TypesTable.getType(a)+" and "+TypesTable.getType(b));
                }
        emitter.addCommand(new Command("ior"));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("csimple_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // csimple_expr ::= cterm 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = String.valueOf(a);
        System.out.println("ct: "+a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("csimple_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cterm ::= cterm STAR cfactor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.out.println(a+"****"+b);
        RESULT = String.valueOf(a)+"*"+String.valueOf(b);
        if (TypesTable.getType(a).getName() == Type.INTEGER && TypesTable.getType(b).getName() == Type.INTEGER){
            TypesTable.addType(a+"*"+b,new TypeExpression().integer());
            emitter.addCommand(new Command("imul"));
        }
        else if(TypesTable.getType(a).getName() == Type.REAL || TypesTable.getType(b).getName() == Type.REAL){
            TypesTable.addType(a+"*"+b,new TypeExpression().real());
        }
        else{
            throw new TypeException("unsupported operation '*' between "+TypesTable.getType(a)+" and "+TypesTable.getType(b));
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cterm",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cterm ::= cterm DIV cfactor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = String.valueOf(a)+"*"+String.valueOf(b);
                        if (TypesTable.getType(a).getName() == Type.INTEGER && TypesTable.getType(b).getName() == Type.INTEGER){
                            TypesTable.addType(a+"/"+b,new TypeExpression().integer());
                        }
                        else if(TypesTable.getType(a).getName() == Type.REAL || TypesTable.getType(b).getName() == Type.REAL){
                            TypesTable.addType(a+"/"+b,new TypeExpression().real());
                        }
                        else{
                            throw new TypeException("unsupported operation 'div' between "+TypesTable.getType(a)+" and "+TypesTable.getType(b));
                        }
                            emitter.addCommand(new Command("idiv"));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cterm",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cterm ::= cterm AND cfactor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = String.valueOf(a)+"&"+String.valueOf(b);
                        if (TypesTable.getType(a).getName() == Type.BOOLEAN && TypesTable.getType(b).getName() == Type.BOOLEAN){
                            TypesTable.addType(a+"&"+b,new TypeExpression().integer());
                            emitter.addCommand(new Command("iand"));
                        }
                        else{
                            throw new TypeException("unsupported operation 'and' between "+TypesTable.getType(a)+" and "+TypesTable.getType(b));
                        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cterm",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cterm ::= cfactor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("fa: "+a);
    RESULT = String.valueOf(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cterm",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cfactor ::= NOT cfactor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (TypesTable.getType(String.valueOf(a)).getName()==Type.BOOLEAN){
        emitter.addCommand(new Command("ineg"));
        }
        else throw new TypeException("unsupported operation 'not' for "+TypesTable.getType(a));

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfactor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cfactor ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = String.valueOf(n);

       TypesTable.addType(""+n,new TypeExpression().integer());
        emitter.addCommand(new Command("ldc", String.valueOf(n)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfactor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cfactor ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CustomSymbol id = (CustomSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

        String name = (String)((CustomSymbol)id).getToken().getValue();
        System.out.println(name+" "+TypesTable.getType(name));
        int index = getVarIndex(name);
        emitter.addCommand(new Command("iload", String.valueOf(index)));
        RESULT = name;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfactor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cfactor ::= LPAREN cexpr RPAREN 
            {
              String RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfactor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cfactor ::= BOOLEAN_LITERAL 
            {
              String RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean lit = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       if(lit == true){
            emitter.addCommand(new Command("iconst_1"));
       } else {
            emitter.addCommand(new Command("iconst_0"));
       }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfactor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // boolean_expr ::= boolean_simple_expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // boolean_expr ::= boolean_simple_expr LT boolean_simple_expr 
            {
              String RESULT =null;
		
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            emitter.addCommand(new Command("if_icmplt", "L" + String.valueOf(trueIndex)));
            emitter.addCommand(new Command("iconst_0"));
            emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
            emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
            emitter.addCommand(new Command("iconst_1"));
            emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // boolean_expr ::= boolean_simple_expr GT boolean_simple_expr 
            {
              String RESULT =null;
		
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            emitter.addCommand(new Command("if_icmpgt", "L" + String.valueOf(trueIndex)));
            emitter.addCommand(new Command("iconst_0"));
            emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
            emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
            emitter.addCommand(new Command("iconst_1"));
            emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // boolean_expr ::= boolean_simple_expr LEQ boolean_simple_expr 
            {
              String RESULT =null;
		
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            emitter.addCommand(new Command("if_icmple", "L" + String.valueOf(trueIndex)));
            emitter.addCommand(new Command("iconst_0"));
            emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
            emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
            emitter.addCommand(new Command("iconst_1"));
            emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // boolean_expr ::= boolean_simple_expr GEQ boolean_simple_expr 
            {
              String RESULT =null;
		
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            emitter.addCommand(new Command("if_icmpge", "L" + String.valueOf(trueIndex)));
            emitter.addCommand(new Command("iconst_0"));
            emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
            emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
            emitter.addCommand(new Command("iconst_1"));
            emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // boolean_expr ::= boolean_simple_expr EQ boolean_simple_expr 
            {
              String RESULT =null;
		
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            emitter.addCommand(new Command("if_icmpeq", "L" + String.valueOf(trueIndex)));
            emitter.addCommand(new Command("iconst_0"));
            emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
            emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
            emitter.addCommand(new Command("iconst_1"));
            emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // boolean_expr ::= boolean_simple_expr NEQ boolean_simple_expr 
            {
              String RESULT =null;
		
            int trueIndex= getLabelIndex();
            int endIndex = getLabelIndex();
            emitter.addCommand(new Command("if_icmpne", "L" + String.valueOf(trueIndex)));
            emitter.addCommand(new Command("iconst_0"));
            emitter.addCommand(new Command("goto", "L" + String.valueOf(endIndex)));
            emitter.addCommand(new Command ("L" + String.valueOf(trueIndex) + ":"));
            emitter.addCommand(new Command("iconst_1"));
            emitter.addCommand(new Command ("L" + String.valueOf(endIndex) + ":"));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // boolean_simple_expr ::= boolean_term 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_simple_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // boolean_simple_expr ::= boolean_simple_expr PLUS boolean_term 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    System.out.println("b "+a+"++++"+b);
            emitter.addCommand(new Command("iadd"));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_simple_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // boolean_simple_expr ::= boolean_simple_expr MINUS boolean_term 
            {
              String RESULT =null;
		
            emitter.addCommand(new Command("isub"));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_simple_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // boolean_simple_expr ::= boolean_simple_expr OR boolean_term 
            {
              String RESULT =null;
		
            emitter.addCommand(new Command("ior"));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_simple_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boolean_term ::= boolean_factor 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_term",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boolean_term ::= boolean_term STAR boolean_factor 
            {
              String RESULT =null;
		
            emitter.addCommand(new Command("imul"));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_term",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // boolean_term ::= boolean_term DIV boolean_factor 
            {
              String RESULT =null;
		
            emitter.addCommand(new Command("idiv"));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_term",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // boolean_term ::= boolean_term AND boolean_factor 
            {
              String RESULT =null;
		
            emitter.addCommand(new Command("iand"));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_term",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // boolean_factor ::= NOT boolean_factor 
            {
              String RESULT =null;
		
            emitter.addCommand(new Command("ineg"));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_factor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // boolean_factor ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            emitter.addCommand(new Command("ldc", String.valueOf(n)));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_factor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // boolean_factor ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CustomSymbol id = (CustomSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            String name = (String)((CustomSymbol)id).getToken().getValue();
            int index = getVarIndex(name);
            emitter.addCommand(new Command("iload", String.valueOf(index)));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_factor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // boolean_factor ::= BOOLEAN_LITERAL 
            {
              String RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean lit = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if(lit == true){
                emitter.addCommand(new Command("iconst_1"));
            } else {
                emitter.addCommand(new Command("iconst_0"));
            }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_factor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // boolean_factor ::= LPAREN boolean_expr RPAREN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_factor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
